/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare class jqxDateTimeInputComponent implements ControlValueAccessor, OnChanges {
    attrAnimationType: string;
    attrAllowNullDate: boolean;
    attrAllowKeyboardDelete: boolean;
    attrClearString: string;
    attrCulture: string;
    attrCloseDelay: number;
    attrCloseCalendarAfterSelection: boolean;
    attrDropDownHorizontalAlignment: string;
    attrDropDownVerticalAlignment: string;
    attrDisabled: boolean;
    attrEnableBrowserBoundsDetection: boolean;
    attrEnableAbsoluteSelection: boolean;
    attrFirstDayOfWeek: number;
    attrFormatString: string;
    attrMin: Date;
    attrMax: Date;
    attrOpenDelay: number;
    attrPlaceHolder: string;
    attrPopupZIndex: number;
    attrRtl: boolean;
    attrReadonly: boolean;
    attrShowFooter: boolean;
    attrSelectionMode: string;
    attrShowWeekNumbers: boolean;
    attrShowTimeButton: boolean;
    attrShowCalendarButton: boolean;
    attrTheme: string;
    attrTemplate: string;
    attrTextAlign: string;
    attrTodayString: string;
    attrValue: Date | null;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxDateTimeInput;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    ngValue: any;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setOptions(options: any): void;
    animationType(arg?: string): string;
    allowNullDate(arg?: boolean): boolean;
    allowKeyboardDelete(arg?: boolean): boolean;
    clearString(arg?: string): string;
    culture(arg?: string): string;
    closeDelay(arg?: number): number;
    closeCalendarAfterSelection(arg?: boolean): boolean;
    dropDownHorizontalAlignment(arg?: string): string;
    dropDownVerticalAlignment(arg?: string): string;
    disabled(arg?: boolean): boolean;
    enableBrowserBoundsDetection(arg?: boolean): boolean;
    enableAbsoluteSelection(arg?: boolean): boolean;
    firstDayOfWeek(arg?: number): number;
    formatString(arg?: string): string;
    height(arg?: string | number): string | number;
    min(arg?: Date): Date;
    max(arg?: Date): Date;
    openDelay(arg?: number): number;
    placeHolder(arg?: string): string;
    popupZIndex(arg?: number): number;
    rtl(arg?: boolean): boolean;
    readonly(arg?: boolean): boolean;
    showFooter(arg?: boolean): boolean;
    selectionMode(arg?: string): string;
    showWeekNumbers(arg?: boolean): boolean;
    showTimeButton(arg?: boolean): boolean;
    showCalendarButton(arg?: boolean): boolean;
    theme(arg?: string): string;
    template(arg?: string): string;
    textAlign(arg?: string): string;
    todayString(arg?: string): string;
    value(arg?: Date): Date;
    width(arg?: string | number): string | number;
    close(): void;
    destroy(): void;
    focus(): void;
    getRange(): any;
    getText(): string;
    getDate(): any;
    getMaxDate(): any;
    getMinDate(): any;
    open(): void;
    setRange(date: any, date2: any): void;
    setMinDate(date: any): void;
    setMaxDate(date: any): void;
    setDate(date: any): void;
    val(value?: any, value2?: any): any;
    onChange: EventEmitter<any>;
    onClose: EventEmitter<any>;
    onOpen: EventEmitter<any>;
    onTextchanged: EventEmitter<any>;
    onValueChanged: EventEmitter<any>;
    __wireEvents__(): void;
}
