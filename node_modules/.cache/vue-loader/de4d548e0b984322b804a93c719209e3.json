{"remainingRequest":"C:\\Users\\macair1\\Desktop\\jqx-tests\\my-appteest\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\macair1\\Desktop\\jqx-tests\\my-appteest\\node_modules\\jqwidgets-scripts\\jqwidgets-vue\\vue_jqxpanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\macair1\\Desktop\\jqx-tests\\my-appteest\\node_modules\\jqwidgets-scripts\\jqwidgets-vue\\vue_jqxpanel.vue","mtime":499162500000},{"path":"C:\\Users\\macair1\\Desktop\\jqx-tests\\my-appteest\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\macair1\\Desktop\\jqx-tests\\my-appteest\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\macair1\\Desktop\\jqx-tests\\my-appteest\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\macair1\\Desktop\\jqx-tests\\my-appteest\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport '../jqwidgets/jqxcore.js';\nimport '../jqwidgets/jqxbuttons.js';\nimport '../jqwidgets/jqxscrollbar.js';\nimport '../jqwidgets/jqxpanel.js';\n\nexport default {\n    props: {\n        autoUpdate: Boolean,\n        disabled: Boolean,\n        height: [Number, String],\n        rtl: Boolean,\n        sizeMode: String,\n        scrollBarSize: Number,\n        theme: String,\n        width: [Number, String],\n        autoCreate: {\n            default: true,\n            type: Boolean\n        }\n    },\n    created: function () {\n        this.id = 'jqxPanel' + JQXLite.generateID();\n        this.componentSelector = '#' + this.id;\n    },\n    mounted: function () {\n        if (this.autoCreate) this.__createComponent__();\n    },\n    methods: {\n        createComponent: function (options) {\n            if (!this.autoCreate) this.__createComponent__(options)\n            else console.warn('Component is already created! If you want to use createComponent, please set \"autoCreate\" property to \"false\".');\n        },\n        setOptions: function (options) {\n            JQXLite(this.componentSelector).jqxPanel(options);\n        },\n        getOptions: function () {\n            const usedProps = Object.keys(this.__manageProps__());\n            const resultToReturn = {};\n            for (let i = 0; i < usedProps.length; i++) {\n                resultToReturn[usedProps[i]] = JQXLite(this.componentSelector).jqxPanel(usedProps[i]);\n            }\n            return resultToReturn;\n        },\n        append: function(HTMLElement) {\n            JQXLite(this.componentSelector).jqxPanel('append', HTMLElement);  \n        },\n        clearcontent: function() {\n            JQXLite(this.componentSelector).jqxPanel('clearcontent');  \n        },\n        destroy: function() {\n            JQXLite(this.componentSelector).jqxPanel('destroy');  \n        },\n        focus: function() {\n            JQXLite(this.componentSelector).jqxPanel('focus');  \n        },\n        getScrollHeight: function() {\n            return JQXLite(this.componentSelector).jqxPanel('getScrollHeight');  \n        },\n        getVScrollPosition: function() {\n            return JQXLite(this.componentSelector).jqxPanel('getVScrollPosition');  \n        },\n        getScrollWidth: function() {\n            return JQXLite(this.componentSelector).jqxPanel('getScrollWidth');  \n        },\n        getHScrollPosition: function() {\n            return JQXLite(this.componentSelector).jqxPanel('getHScrollPosition');  \n        },\n        prepend: function(HTMLElement) {\n            JQXLite(this.componentSelector).jqxPanel('prepend', HTMLElement);  \n        },\n        remove: function(HTMLElement) {\n            JQXLite(this.componentSelector).jqxPanel('remove', HTMLElement);  \n        },\n        scrollTo: function(left, top) {\n            JQXLite(this.componentSelector).jqxPanel('scrollTo', left, top);  \n        },\n        _autoUpdate: function(arg) {\n            if (arg !== undefined) {\n                JQXLite(this.componentSelector).jqxPanel('autoUpdate', arg)\n            } else {\n                return JQXLite(this.componentSelector).jqxPanel('autoUpdate');\n            }\n        },\n        _disabled: function(arg) {\n            if (arg !== undefined) {\n                JQXLite(this.componentSelector).jqxPanel('disabled', arg)\n            } else {\n                return JQXLite(this.componentSelector).jqxPanel('disabled');\n            }\n        },\n        _height: function(arg) {\n            if (arg !== undefined) {\n                JQXLite(this.componentSelector).jqxPanel('height', arg)\n            } else {\n                return JQXLite(this.componentSelector).jqxPanel('height');\n            }\n        },\n        _rtl: function(arg) {\n            if (arg !== undefined) {\n                JQXLite(this.componentSelector).jqxPanel('rtl', arg)\n            } else {\n                return JQXLite(this.componentSelector).jqxPanel('rtl');\n            }\n        },\n        _sizeMode: function(arg) {\n            if (arg !== undefined) {\n                JQXLite(this.componentSelector).jqxPanel('sizeMode', arg)\n            } else {\n                return JQXLite(this.componentSelector).jqxPanel('sizeMode');\n            }\n        },\n        _scrollBarSize: function(arg) {\n            if (arg !== undefined) {\n                JQXLite(this.componentSelector).jqxPanel('scrollBarSize', arg)\n            } else {\n                return JQXLite(this.componentSelector).jqxPanel('scrollBarSize');\n            }\n        },\n        _theme: function(arg) {\n            if (arg !== undefined) {\n                JQXLite(this.componentSelector).jqxPanel('theme', arg)\n            } else {\n                return JQXLite(this.componentSelector).jqxPanel('theme');\n            }\n        },\n        _width: function(arg) {\n            if (arg !== undefined) {\n                JQXLite(this.componentSelector).jqxPanel('width', arg)\n            } else {\n                return JQXLite(this.componentSelector).jqxPanel('width');\n            }\n        },\n        __createComponent__: function (options) {\n            let widgetOptions;\n            options ? widgetOptions = options : widgetOptions = this.__manageProps__();\n            JQXLite(this.componentSelector).jqxPanel(widgetOptions);\n            this.__extendProps__();\n            this.__wireEvents__();\n        },\n        __manageProps__: function () {\n            const widgetProps = ['autoUpdate','disabled','height','rtl','sizeMode','scrollBarSize','theme','width'];\n            const componentProps = this.$options.propsData;\n            let options = {};\n\n            for (let prop in componentProps) {\n                if (widgetProps.indexOf(prop) !== -1) {\n                    options[prop] = componentProps[prop];\n                }\n            }\n            return options;\n        },\n        __extendProps__: function () {\n            const that = this;\n\n            Object.defineProperty(that, 'autoUpdate', {\n                get: function() {\n                    return that._autoUpdate();\n                },\n                set: function(newValue) {\n                    that._autoUpdate(newValue);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(that, 'disabled', {\n                get: function() {\n                    return that._disabled();\n                },\n                set: function(newValue) {\n                    that._disabled(newValue);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(that, 'height', {\n                get: function() {\n                    return that._height();\n                },\n                set: function(newValue) {\n                    that._height(newValue);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(that, 'rtl', {\n                get: function() {\n                    return that._rtl();\n                },\n                set: function(newValue) {\n                    that._rtl(newValue);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(that, 'sizeMode', {\n                get: function() {\n                    return that._sizeMode();\n                },\n                set: function(newValue) {\n                    that._sizeMode(newValue);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(that, 'scrollBarSize', {\n                get: function() {\n                    return that._scrollBarSize();\n                },\n                set: function(newValue) {\n                    that._scrollBarSize(newValue);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(that, 'theme', {\n                get: function() {\n                    return that._theme();\n                },\n                set: function(newValue) {\n                    that._theme(newValue);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(that, 'width', {\n                get: function() {\n                    return that._width();\n                },\n                set: function(newValue) {\n                    that._width(newValue);\n                },\n                enumerable: true,\n                configurable: true\n            });\n        },\n        __wireEvents__: function () {\n            const that = this;\n\n        }\n    }\n}\n",{"version":3,"sources":["vue_jqxpanel.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"vue_jqxpanel.vue","sourceRoot":"node_modules/jqwidgets-scripts/jqwidgets-vue","sourcesContent":["<template>\n    <div v-bind:id=\"id\">\n        <slot></slot>\n    </div>\n</template>\n\n<script>\n    import '../jqwidgets/jqxcore.js';\n    import '../jqwidgets/jqxbuttons.js';\n    import '../jqwidgets/jqxscrollbar.js';\n    import '../jqwidgets/jqxpanel.js';\n\n    export default {\n        props: {\n            autoUpdate: Boolean,\n            disabled: Boolean,\n            height: [Number, String],\n            rtl: Boolean,\n            sizeMode: String,\n            scrollBarSize: Number,\n            theme: String,\n            width: [Number, String],\n            autoCreate: {\n                default: true,\n                type: Boolean\n            }\n        },\n        created: function () {\n            this.id = 'jqxPanel' + JQXLite.generateID();\n            this.componentSelector = '#' + this.id;\n        },\n        mounted: function () {\n            if (this.autoCreate) this.__createComponent__();\n        },\n        methods: {\n            createComponent: function (options) {\n                if (!this.autoCreate) this.__createComponent__(options)\n                else console.warn('Component is already created! If you want to use createComponent, please set \"autoCreate\" property to \"false\".');\n            },\n            setOptions: function (options) {\n                JQXLite(this.componentSelector).jqxPanel(options);\n            },\n            getOptions: function () {\n                const usedProps = Object.keys(this.__manageProps__());\n                const resultToReturn = {};\n                for (let i = 0; i < usedProps.length; i++) {\n                    resultToReturn[usedProps[i]] = JQXLite(this.componentSelector).jqxPanel(usedProps[i]);\n                }\n                return resultToReturn;\n            },\n            append: function(HTMLElement) {\n                JQXLite(this.componentSelector).jqxPanel('append', HTMLElement);  \n            },\n            clearcontent: function() {\n                JQXLite(this.componentSelector).jqxPanel('clearcontent');  \n            },\n            destroy: function() {\n                JQXLite(this.componentSelector).jqxPanel('destroy');  \n            },\n            focus: function() {\n                JQXLite(this.componentSelector).jqxPanel('focus');  \n            },\n            getScrollHeight: function() {\n                return JQXLite(this.componentSelector).jqxPanel('getScrollHeight');  \n            },\n            getVScrollPosition: function() {\n                return JQXLite(this.componentSelector).jqxPanel('getVScrollPosition');  \n            },\n            getScrollWidth: function() {\n                return JQXLite(this.componentSelector).jqxPanel('getScrollWidth');  \n            },\n            getHScrollPosition: function() {\n                return JQXLite(this.componentSelector).jqxPanel('getHScrollPosition');  \n            },\n            prepend: function(HTMLElement) {\n                JQXLite(this.componentSelector).jqxPanel('prepend', HTMLElement);  \n            },\n            remove: function(HTMLElement) {\n                JQXLite(this.componentSelector).jqxPanel('remove', HTMLElement);  \n            },\n            scrollTo: function(left, top) {\n                JQXLite(this.componentSelector).jqxPanel('scrollTo', left, top);  \n            },\n            _autoUpdate: function(arg) {\n                if (arg !== undefined) {\n                    JQXLite(this.componentSelector).jqxPanel('autoUpdate', arg)\n                } else {\n                    return JQXLite(this.componentSelector).jqxPanel('autoUpdate');\n                }\n            },\n            _disabled: function(arg) {\n                if (arg !== undefined) {\n                    JQXLite(this.componentSelector).jqxPanel('disabled', arg)\n                } else {\n                    return JQXLite(this.componentSelector).jqxPanel('disabled');\n                }\n            },\n            _height: function(arg) {\n                if (arg !== undefined) {\n                    JQXLite(this.componentSelector).jqxPanel('height', arg)\n                } else {\n                    return JQXLite(this.componentSelector).jqxPanel('height');\n                }\n            },\n            _rtl: function(arg) {\n                if (arg !== undefined) {\n                    JQXLite(this.componentSelector).jqxPanel('rtl', arg)\n                } else {\n                    return JQXLite(this.componentSelector).jqxPanel('rtl');\n                }\n            },\n            _sizeMode: function(arg) {\n                if (arg !== undefined) {\n                    JQXLite(this.componentSelector).jqxPanel('sizeMode', arg)\n                } else {\n                    return JQXLite(this.componentSelector).jqxPanel('sizeMode');\n                }\n            },\n            _scrollBarSize: function(arg) {\n                if (arg !== undefined) {\n                    JQXLite(this.componentSelector).jqxPanel('scrollBarSize', arg)\n                } else {\n                    return JQXLite(this.componentSelector).jqxPanel('scrollBarSize');\n                }\n            },\n            _theme: function(arg) {\n                if (arg !== undefined) {\n                    JQXLite(this.componentSelector).jqxPanel('theme', arg)\n                } else {\n                    return JQXLite(this.componentSelector).jqxPanel('theme');\n                }\n            },\n            _width: function(arg) {\n                if (arg !== undefined) {\n                    JQXLite(this.componentSelector).jqxPanel('width', arg)\n                } else {\n                    return JQXLite(this.componentSelector).jqxPanel('width');\n                }\n            },\n            __createComponent__: function (options) {\n                let widgetOptions;\n                options ? widgetOptions = options : widgetOptions = this.__manageProps__();\n                JQXLite(this.componentSelector).jqxPanel(widgetOptions);\n                this.__extendProps__();\n                this.__wireEvents__();\n            },\n            __manageProps__: function () {\n                const widgetProps = ['autoUpdate','disabled','height','rtl','sizeMode','scrollBarSize','theme','width'];\n                const componentProps = this.$options.propsData;\n                let options = {};\n\n                for (let prop in componentProps) {\n                    if (widgetProps.indexOf(prop) !== -1) {\n                        options[prop] = componentProps[prop];\n                    }\n                }\n                return options;\n            },\n            __extendProps__: function () {\n                const that = this;\n\n                Object.defineProperty(that, 'autoUpdate', {\n                    get: function() {\n                        return that._autoUpdate();\n                    },\n                    set: function(newValue) {\n                        that._autoUpdate(newValue);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                Object.defineProperty(that, 'disabled', {\n                    get: function() {\n                        return that._disabled();\n                    },\n                    set: function(newValue) {\n                        that._disabled(newValue);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                Object.defineProperty(that, 'height', {\n                    get: function() {\n                        return that._height();\n                    },\n                    set: function(newValue) {\n                        that._height(newValue);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                Object.defineProperty(that, 'rtl', {\n                    get: function() {\n                        return that._rtl();\n                    },\n                    set: function(newValue) {\n                        that._rtl(newValue);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                Object.defineProperty(that, 'sizeMode', {\n                    get: function() {\n                        return that._sizeMode();\n                    },\n                    set: function(newValue) {\n                        that._sizeMode(newValue);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                Object.defineProperty(that, 'scrollBarSize', {\n                    get: function() {\n                        return that._scrollBarSize();\n                    },\n                    set: function(newValue) {\n                        that._scrollBarSize(newValue);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                Object.defineProperty(that, 'theme', {\n                    get: function() {\n                        return that._theme();\n                    },\n                    set: function(newValue) {\n                        that._theme(newValue);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                Object.defineProperty(that, 'width', {\n                    get: function() {\n                        return that._width();\n                    },\n                    set: function(newValue) {\n                        that._width(newValue);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n            },\n            __wireEvents__: function () {\n                const that = this;\n\n            }\n        }\n    }\n</script>\n"]}]}